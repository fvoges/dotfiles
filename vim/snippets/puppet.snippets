# #!/bin/zsh
snippet [
	[ ${1} ]
snippet '
	'${1}'
snippet "
	"${1}"
snippet {
	{ ${1} }
snippet notify
	notify { "${1:message}": }
snippet user
	user {
		"${1:nobody}":
		  ensure     => "${2:present}",
			home       => "${3:/var/lib/$1}",
			uid        => "${4:333}",
			gid        => "${5:$4}",
			comment    => "${6:$1 account}",
			membership => "${7:minimum}",
			password   => '!!',
			shell      => "${8:/bin/bash, /bin/false, /sbin/nologin, /bin/zsh, /bin/tcsh}",
	}
snippet define
	# Define: ${1:mydefinedtype}
	#
	#   ${2:defined type description goes here.}
	#
	# == Parameters
	#
	# == Actions
	#
	# == Requires
	#
	# == Example
	#
	define $1($3) {
	  ${4:# statements}
	}
	# EOF
snippet define::add Config Chunk
	# This define allows to add configuration fragments for $1
	#
	# == Parameters
	# [*content*]
	#   Configuration chunk to be added. Normally used with template().
	# [*order*]
	#   Order precedence of the chunk within the config file. The default (global) template uses order=10. Default: 15
	# == Requires
	#   Class['concat::setup']
	#
	#  Expects $lmn_$1::params::config_file to be defined in $lmn_$1::params
	# == Example
	#
	#  class someclass {
	#    lmn_$1::config::add {'myextrachunk':
	#      content => template("${module_name}/myconfigchunk.erb"),
	#    }
	#  }
	define lmn_${1:parentclass}::config::add($content='', $order=15) {
	  class { 'lmn_$1::params': }
	  if $content == '' {
	    $body = $name
	  } else {
	    $body = $content
	  }

	  concat::fragment{"${lmn_$1::config_file}_fragment_$name":
	    target  => $lmn_$1::config_file,
	    content => $body,
	    order   => $order,
	  }
	}

	# ex: set et sw=2 ts=2 ft=puppet:
snippet #!
	#! /usr/bin/env puppet

snippet if
	if (${1:condition}) {
	  ${2:# statements}
	}
snippet case
	ca se ${1:$operatingsystem} {
		${2:"centos", "redhat"}: {
			${3:# statements about $2}
		}
		"${4:default}": {
			${5:# statements about $4}
		}
	}${6}
snippet class
	# Class: lmn_${1:myclass}
	#
	# ${2:class description goes here.}
	#
	# == Parameters
	# [*enabled*]
	#   Enable $1's module and its services (default: 'true').
	# [*ensure*]
	#   Package's ensure attribute (default: 'installed').
	# == Examples
	#
	# ${3:Class' use example goes here.}
	#
	class lmn_$1 (
		$enabled = hiera('$1_enabled'),
		$ensure = hiera('$1_ensure')
	) {
		anchor { 'lmn_$1::begin': }~>
		class { 'lmn_$1::package': }~>
		class { 'lmn_$1::config': }~>
		class { 'lmn_$1::service': }~>
		anchor { 'lmn_$1::end': }
	}
	# ex: set et sw=2 ts=2 ft=puppet:
snippet class::
	# Class: lmn_${1:parentclass}::${2:myclass}
	#
	# ${3:class description goes here.}
	#
	# == Parameters
	#
	# == Actions
	#
	# == Requires
	#
	# == Examples
	#
	class lmn_$1::$2 inherits lmn_$1 {
		${3:# statements}
	}
snippet class::config File
	# Class: lmn_$1::config
	#
	# This class sets up configuration files for module $1.
	#
	# *Note:* This class should not be used externally.
	#
	# == Requires
	#   This requires $lmn_$1::config_file to be defined.
	#
	class lmn_${1:parentclass}::config {

		file { $lmn_$1::config_file:
			ensure => ${2:file}
	    owner  => '${3:root}',
	    group  => '${4:$3}',
	    mode   => '${5:0444}',
	    source => "puppet:///modules/${module_name}/${6:configfile}",
	  }
	}
	# ex: set et sw=2 ts=2 ft=puppet:
snippet class::config Template
	# Class: lmn_$1::config
	#
	# This class sets up configuration files for module $1.
	#
	# *Note:* This class should not be used externally.
	#
	# == Requires
	#   This requires $lmn_$1::config_file to be defined.
	#
	class lmn_${1:parentclass}::config {

		file { $lmn_$1::config_file:
			ensure  => ${2:file}
	    owner   => '${3:root}',
	    group   => '${4:$3}',
	    mode    => '${5:0444}',
	    content => template("${module_name}/${6:configfile}.erb",
	  }
	}
	# ex: set et sw=2 ts=2 ft=puppet:
snippet class::config Concat Module
	# Class: lmn_$1::config
	#
	# This class sets up configuration files for module $1.
	#
	# *Note:* This class should not be used externally.
	#
	# == Requires
	#   This requires $lmn_$1::config_file to be defined.
	#
	#   Depends on Class['concat::setup']
	#
	class lmn_${1:parentclass}::config {
		Class { require => Class['concat::setup'], }

	  concat { $lmn_$1::config_file:
	    owner => '${2:root}',
	    group => '${3:$3}',
	    mode  => '${4:0444}',
	  }

	  concat::fragment{"${lmn_$1::config_file}_global":
	    target  => $lmn_$1::config_file,
	    content => template("${module_name}/${5:chunk_template}snmpd.conf.erb"),
	    order   => 10,
	  }
	}
	# ex: set et sw=2 ts=2 ft=puppet:
snippet class::package
	# This class will install the packages for $1.
	#
	# *Note*: This class should not be used externally.
	class lmn_${1:parentclass}::package ($ensure = $lmn_$1::ensure) {
	  package { '${2:package_name}' : ensure => $ensure }

	}

	# ex: set ts=2 et sw=2 filetype=puppet:
snippet class::params
	# This class provides parameters for all the other classes in the
	# module $1.
	class lmn_${1:parentclass}::params {

		$$1_ensure = '${2:installed}'
	  $$1_enabled = '${3:true}'

		${4:# Extra params here...}
	}
	# ex: set ts=2 et sw=2 ft=puppet:
snippet class::service
	# This class manages services for $1.
	class lmn_${1:parentclass}::service ($enabled = $lmn_$1::enabled){
	  if $enabled == 'true' {
	    $ensure = 'running'
	  } else {
	    $ensure = 'stopped'
	  }

	  service { '${2:servicename}' :
	    ensure     => $ensure,
	    enable     => $enabled,
	    hasstatus  => true,
	    hasrestart => true,
	  }
	}
	# ex: set ts=2 et sw=2 ft=puppet:
snippet File
	File {
	  owner => "${1:0}",
	  group => "${2:$1}",
	  mode  => "${3:0644}",
	}
snippet file
	file {
	  "${1:/dev/null}":
	    source  => "puppet:///modules/${module}${2:$1}",
			recurse => "${3:false}"
	}
snippet :
	"${1:title}":${2}
snippet >
	${1:attribute} => ${2:value},${3}
